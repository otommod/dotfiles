#!/usr/bin/env python3

import configparser
import os
import os.path
import stat
import sys
import tempfile

try:
    from operator import attrgetter
    import natsort

    # This should correctly be `attrgetter("path")`.  However, that performs
    # noticably worse.  And given that we only sort files from the same
    # directory, they should be identical.
    _dirent_name = attrgetter("name")
    file_name_key = natsort.os_sort_keygen(key=_dirent_name)

except ImportError:
    from locale import LC_ALL, setlocale, strxfrm
    setlocale(LC_ALL, "")

    def file_name_key(dirent):
        return strxfrm(dirent.name)

XDG_CONFIG_HOME = os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))


def file_mtime_key(dirent):
    return dirent.stat().st_mtime_ns


def file_size_key(dirent):
    return dirent.stat().st_size


def file_ext_key(dirent):
    _, ext = os.path.splitext(dirent.name)
    return (ext, file_name_key(dirent))


libfm_dir_settings = os.path.join(
    XDG_CONFIG_HOME, "libfm", "dir-settings.conf")
pcmanfm_conf = os.path.join(
    XDG_CONFIG_HOME, "pcmanfm", "default", "pcmanfm.conf")

def pcmanfm_sorted_args(dirname):
    pcmanfm = configparser.ConfigParser(inline_comment_prefixes=None)
    pcmanfm.read(pcmanfm_conf)
    default_sort = pcmanfm.get("ui", "sort", raw=True, fallback="name;ascending")

    dir_settings = configparser.ConfigParser(inline_comment_prefixes=None)
    with open(libfm_dir_settings, "r",
              encoding=sys.getfilesystemencoding(),
              errors=sys.getfilesystemencodeerrors()) as fp:
        dir_settings.read_file(fp, source=libfm_dir_settings)

    dir_sort = dir_settings.get(os.path.abspath(dirname), "Sort",
                                raw=True, fallback=default_sort)

    key, reverse = file_name_key, False
    for p in dir_sort.split(";"):
        if p == "mtime":
            key = file_mtime_key
        elif p == "size":
            key = file_size_key
        elif p == "ext":
            key = file_ext_key
        elif p == "descending":
            reverse = True
        elif p == "ascending":
            reverse = False
        elif p == "case":
            # match case
            pass

    return key, reverse


mvi_config_dir = os.path.join(XDG_CONFIG_HOME, "mpv-image-viewer")

def mpv(files, starting_file=None):
    index = 0
    try:
        if starting_file:
            index = files.index(starting_file)
    except ValueError:
        pass

    m3u = tempfile.TemporaryFile(mode="w+",
                                 encoding=sys.getfilesystemencoding(),
                                 errors=sys.getfilesystemencodeerrors())
    m3u.write("#EXTM3U\n")
    # This is technically wrong; a filename can contain a newline
    m3u.writelines(f + "\n" for f in files)
    m3u.flush()

    # We're using stdin for the playlist because the fd:// and fdclose://
    # cannot work with relative file paths
    os.dup2(m3u.fileno(), 0, inheritable=True)
    os.execvp("mpv", ["mpv",
                      "--config-dir=%s" % mvi_config_dir,
                      "--playlist-start=%d" % index,
                      "--playlist=-"])


def main(argv):
    if len(argv) != 2:
        mpv(argv[1:])

    selection = argv[1]
    selection_dir = os.path.dirname(selection) or "."

    st = os.stat(selection)
    if stat.S_ISDIR(st.st_mode):
        selection_dir = selection

    sort_key, sort_reverse = pcmanfm_sorted_args(selection_dir)

    with os.scandir(selection_dir) as dp:
        files = [e for e in dp if not e.is_dir()]
        files.sort(key=sort_key, reverse=sort_reverse)

    # `scandir()` always returns relative paths.  In other words:
    #     all(e.path.startswith("./") for e in scandir("."))
    #
    # If `selection` is just a filename (not a relative path), it won't be
    # found in `[e.path for e in files]`
    if selection_dir == "." and not selection.startswith("./"):
        paths = [e.name for e in files]
    else:
        paths = [e.path for e in files]

    mpv(paths, selection)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
