#!/usr/bin/env python3

import configparser
import os
import pathlib
import stat
import sys
import tempfile

try:
    from operator import attrgetter

    import natsort

    _path_name = attrgetter("name")
    # file_name_key = natsort.os_sort_keygen(key=str)
    file_name_key = natsort.os_sort_keygen(key=_path_name)

except ImportError:
    from locale import LC_ALL, setlocale, strxfrm
    setlocale(LC_ALL, "")

    def file_name_key(dirent):
        return strxfrm(dirent.name)

try:
    XDG_CONFIG_HOME = pathlib.Path(os.environ["XDG_CONFIG_HOME"])
except KeyError:
    XDG_CONFIG_HOME = pathlib.Path.home() / ".config"

mvi_config_dir = XDG_CONFIG_HOME / "mpv-image-viewer"
libfm_dir_settings = XDG_CONFIG_HOME / "libfm" / "dir-settings.conf"
pcmanfm_conf = XDG_CONFIG_HOME / "pcmanfm" / "default" / "pcmanfm.conf"


def file_mtime_key(path):
    return path.stat().st_mtime_ns


def file_size_key(path):
    return path.stat().st_size


def file_ext_key(path):
    return (path.suffix, file_name_key(path))


def pcmanfm_sorted_get(d):
    pcmanfm = configparser.ConfigParser()
    # XXX: cannot set encoding error to sys.getfilesystemencodeerrors()
    pcmanfm.read(pcmanfm_conf, encoding=sys.getfilesystemencoding())
    default_prefs = pcmanfm.get("ui", "sort", raw=True, fallback="")

    dir_settings = configparser.ConfigParser()
    dir_settings.read(libfm_dir_settings, encoding=sys.getfilesystemencoding())

    key = file_name_key
    reverse = False

    d = str(d.resolve())
    prefs = dir_settings.get(d, "Sort", raw=True, fallback=default_prefs)
    for p in prefs.split(";"):
        if p == "mtime":
            key = file_mtime_key
        elif p == "size":
            key = file_size_key
        elif p == "ext":
            key = file_ext_key
        elif p == "descending":
            reverse = True
        elif p == "ascending":
            reverse = False

    return key, reverse


def mpv(files, starting_file=None):
    # def is_starting_file(p):
    #     return p[1].samefile(starting_file)
    # index, _ = next(filter(is_starting_file, enumerate(files)), 0)

    index = 0
    try:
        if starting_file:
            index = files.index(starting_file)
    except ValueError:
        pass

    # m3u = os.memfd_create("m3u")
    m3u = tempfile.TemporaryFile(mode="w+",
                                 encoding=sys.getfilesystemencoding(),
                                 errors=sys.getfilesystemencodeerrors())
    m3u.write("#EXTM3U\n")
    m3u.writelines(str(f) + "\n" for f in files)
    m3u.flush()

    # We're using stdin for the playlist because the fd:// and fdclose://
    # cannot work with relative file paths
    os.dup2(m3u.fileno(), 0, inheritable=True)
    os.execvp("mpv", ["mpv",
                      "--config-dir=%s" % mvi_config_dir,
                      "--playlist-start=%d" % index,
                      "--playlist=-"])


def main(argv):
    if len(argv) != 2:
        mpv(argv[1:])

    selection = pathlib.Path(argv[1])
    selection_dir = selection.parent

    stat_ = selection.stat()
    if stat.S_ISDIR(stat_.st_mode):
        selection_dir = selection

    sort_key, sort_reverse = pcmanfm_sorted_get(selection_dir)

    files = sorted((e for e in selection_dir.iterdir() if not e.is_dir()),
                   key=sort_key, reverse=sort_reverse)
    mpv(files, selection)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
